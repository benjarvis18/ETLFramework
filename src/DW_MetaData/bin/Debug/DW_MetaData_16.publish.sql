/*
Deployment script for DW_MetaData

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DW_MetaData"
:setvar DefaultFilePrefix "DW_MetaData"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [PSA].[UQ_PSA_Extractions_SourceConnectionId_SourceSchema_SourceTableName]...';


GO
ALTER TABLE [PSA].[Extractions]
    ADD CONSTRAINT [UQ_PSA_Extractions_SourceConnectionId_SourceSchema_SourceTableName] UNIQUE NONCLUSTERED ([SourceConnectionId] ASC, [SourceSchema] ASC, [SourceTableName] ASC);


GO
PRINT N'Creating [PSA].[UQ_PSA_UniqueColumns_ExtractionId_ColumnName]...';


GO
ALTER TABLE [PSA].[UniqueColumns]
    ADD CONSTRAINT [UQ_PSA_UniqueColumns_ExtractionId_ColumnName] UNIQUE NONCLUSTERED ([ExtractionId] ASC, [ColumnName] ASC);


GO
PRINT N'Creating [Staging].[UQ_Staging_Extractions_SourceConnectionId_SourceSchema_SourceTableName]...';


GO
ALTER TABLE [Staging].[Extractions]
    ADD CONSTRAINT [UQ_Staging_Extractions_SourceConnectionId_SourceSchema_SourceTableName] UNIQUE NONCLUSTERED ([SourceConnectionId] ASC, [SourceSchema] ASC, [SourceTableName] ASC);


GO
PRINT N'Creating [Staging].[UQ_Staging_UniqueColumns_ExtractionId_ColumnName]...';


GO
ALTER TABLE [Staging].[UniqueColumns]
    ADD CONSTRAINT [UQ_Staging_UniqueColumns_ExtractionId_ColumnName] UNIQUE NONCLUSTERED ([ExtractionId] ASC, [ColumnName] ASC);


GO
TRUNCATE TABLE Staging.UniqueColumns

-- Connections
MERGE Staging.Connections AS target 
USING 
	(
		SELECT	'Target_StagingDatabase' AS ConnectionName,
				'Data Source=(local);Persist Security Info=true;Integrated Security=SSPI;Initial Catalog=DW_Staging' AS ConnectionString

		UNION ALL

		SELECT	'Source_AdventureWorks' AS ConnectionName,
				'Data Source=(local);Persist Security Info=true;Integrated Security=SSPI;Initial Catalog=AdventureWorks' AS ConnectionString
	) AS source ON source.ConnectionName = target.ConnectionName
WHEN MATCHED THEN 
	UPDATE SET target.ConnectionString = source.ConnectionString
WHEN NOT MATCHED THEN
	INSERT (ConnectionName, ConnectionString)
	VALUES (source.ConnectionName, source.ConnectionString)
WHEN NOT MATCHED BY SOURCE THEN
	DELETE
;

-- Extractions
DECLARE @TargetConnectionId INT = (SELECT ConnectionId FROM Staging.Connections AS C WHERE C.ConnectionName = 'Target_StagingDatabase')

	-- AdventureWorks
	DECLARE @SourceConnectionId INT = (SELECT ConnectionId FROM Staging.Connections AS C WHERE C.ConnectionName = 'Source_AdventureWorks')

	MERGE Staging.Extractions AS target 
	USING 
		(
			SELECT	@SourceConnectionId AS SourceConnectionId,
					'Sales' AS SourceSchema,
					'SalesOrderHeader' AS SourceTableName,
					@TargetConnectionId AS TargetConnectionId,
					'stg' AS TargetSchema,
					'AdventureWorks_Sales_SalesOrderHeader' AS TargetTableName

			UNION ALL

			SELECT	@SourceConnectionId AS SourceConnectionId,
					'Sales' AS SourceSchema,
					'SalesOrderDetail' AS SourceTableName,
					@TargetConnectionId AS TargetConnectionId,
					'stg' AS TargetSchema,
					'AdventureWorks_Sales_SalesOrderDetail' AS TargetTableName
		) AS source ON source.SourceConnectionId = target.SourceConnectionId
						AND source.SourceSchema = target.SourceSchema
						AND source.SourceTableName = target.TargetTableName
	WHEN MATCHED THEN 
		UPDATE SET	target.TargetConnectionId = source.TargetConnectionId,
					target.TargetSchema = source.TargetSchema,
					target.TargetTableName = source.TargetTableName				
	WHEN NOT MATCHED THEN
		INSERT (SourceConnectionId, SourceSchema, SourceTableName, TargetConnectionId, TargetSchema, TargetTableName)
		VALUES (source.SourceConnectionId, source.SourceSchema, source.SourceTableName, source.TargetConnectionId, source.TargetSchema, source.TargetTableName)
	WHEN NOT MATCHED BY SOURCE THEN
		DELETE
	;	

	INSERT INTO Staging.UniqueColumns
        ( ExtractionId, ColumnName )
		SELECT	(	SELECT	E.ExtractionId
					FROM	Staging.Extractions AS E
							INNER JOIN Staging.Connections AS C ON C.ConnectionId = E.SourceConnectionId
					WHERE	C.ConnectionName = 'Source_AdventureWorks'
							AND E.SourceSchema = 'Sales'
							AND E.SourceTableName = 'SalesOrderHeader'
				) AS ExtractionId,
				'SalesOrderID' AS ColumnName

		UNION ALL

		SELECT	(	SELECT	E.ExtractionId
					FROM	Staging.Extractions AS E
							INNER JOIN Staging.Connections AS C ON C.ConnectionId = E.SourceConnectionId
					WHERE	C.ConnectionName = 'Source_AdventureWorks'
							AND E.SourceSchema = 'Sales'
							AND E.SourceTableName = 'SalesOrderDetail'
				) AS ExtractionId,
				'SalesOrderID' AS ColumnName

		UNION ALL

		SELECT	(	SELECT	E.ExtractionId
					FROM	Staging.Extractions AS E
							INNER JOIN Staging.Connections AS C ON C.ConnectionId = E.SourceConnectionId
					WHERE	C.ConnectionName = 'Source_AdventureWorks'
							AND E.SourceSchema = 'Sales'
							AND E.SourceTableName = 'SalesOrderDetail'
				) AS ExtractionId,
				'SalesOrderDetailID' AS ColumnName
GO
TRUNCATE TABLE PSA.UniqueColumns

-- Connections
MERGE PSA.Connections AS target 
USING 
	(
		SELECT	'Target_PSADatabase' AS ConnectionName,
				'Data Source=(local);Persist Security Info=true;Integrated Security=SSPI;Initial Catalog=DW_PSA' AS ConnectionString

		UNION ALL

		SELECT	'Source_StagingDatabase' AS ConnectionName,
				'Data Source=(local);Persist Security Info=true;Integrated Security=SSPI;Initial Catalog=DW_Staging' AS ConnectionString
	) AS source ON source.ConnectionName = target.ConnectionName
WHEN MATCHED THEN 
	UPDATE SET target.ConnectionString = source.ConnectionString
WHEN NOT MATCHED THEN
	INSERT (ConnectionName, ConnectionString)
	VALUES (source.ConnectionName, source.ConnectionString)
WHEN NOT MATCHED BY SOURCE THEN
	DELETE
;

-- Extractions
DECLARE @SourceConnectionId INT = ( SELECT ConnectionId FROM PSA.Connections AS C WHERE C.ConnectionName = 'Source_StagingDatabase' )
DECLARE @TargetConnectionId INT = ( SELECT ConnectionId FROM PSA.Connections AS C WHERE C.ConnectionName = 'Target_PSADatabase' )

MERGE PSA.Extractions AS target 
USING 
	(
		SELECT	@SourceConnectionId AS SourceConnectionId,
				E.TargetSchema AS SourceSchema,
				E.TargetTableName AS SourceTableName,		
				@TargetConnectionId AS TargetConnectionId,
				'psa' AS TargetSchema,
				E.TargetTableName AS TargetTableName
		FROM	Staging.Extractions AS E
				INNER JOIN Staging.Connections AS C ON C.ConnectionId = E.TargetConnectionId
	) AS source ON source.SourceConnectionId = target.SourceConnectionId
					AND source.SourceSchema = target.SourceSchema
					AND source.SourceTableName = target.TargetTableName
WHEN MATCHED THEN 
	UPDATE SET	target.TargetConnectionId = source.TargetConnectionId,
				target.TargetSchema = source.TargetSchema,
				target.TargetTableName = source.TargetTableName				
WHEN NOT MATCHED THEN
	INSERT (SourceConnectionId, SourceSchema, SourceTableName, TargetConnectionId, TargetSchema, TargetTableName)
	VALUES (source.SourceConnectionId, source.SourceSchema, source.SourceTableName, source.TargetConnectionId, source.TargetSchema, source.TargetTableName)
WHEN NOT MATCHED BY SOURCE THEN
	DELETE
;



GO


GO

GO
PRINT N'Update complete.';


GO
